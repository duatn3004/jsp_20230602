package controller;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import domain.BoardVO;
import domain.PagingVO;
import handler.PagingHandler;
import service.BoardService;
import service.BoardServiceImpl;


@WebServlet("/brd/*")
public class BoardController extends HttpServlet {
	private static final long serialVersionUID = 1L;
	private static final Logger log = LoggerFactory.getLogger(BoardController.class);
	private RequestDispatcher rdp;
	private String destPage;
	private int isOk;
	private BoardService bsv;
       

    public BoardController() {
        bsv = new BoardServiceImpl(); 
    }


	protected void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		request.setCharacterEncoding("utf-8");
		response.setCharacterEncoding("utf-8");
		response.setContentType("text/html; charset=utf-8");
		
		String uri = request.getRequestURI();
		log.info(">>> uri >" + uri);
		String path = uri.substring(uri.lastIndexOf("/")+1);
		log.info(">>> path >" + path);
		
		switch (path) {
		case "register":
			destPage = "/board/register.jsp";
			break;
			
		case "insert":
			try {
				String title = request.getParameter("title");
				String writer = request.getParameter("writer");
				String content = request.getParameter("content");
				
				BoardVO bvo = new BoardVO(title,writer,content);
				
				log.info(">>>"+bvo);
				//insert, update, delete => 리턴타입 isOK
				//select => BoardVO의 객체값 (여러개 리턴이면 List)
				isOk=bsv.insert(bvo);
				log.info(">>> insert > " +(isOk > 0 ? "성공":"실패"));
				destPage="/";
			} catch (Exception e) {
				e.printStackTrace();
			}
			break;
			
		case "list":
			try {
				List<BoardVO> list = new ArrayList<BoardVO>();
				list=bsv.list();
				request.setAttribute("list", list);
				log.info(">>> 게시판 리스트 성공");
				log.info(">>> list : "+list);
				destPage="/board/list.jsp";				
			} catch (Exception e) {
				e.printStackTrace();
			}
			break;
			
		case "page":
			try {
				int pageNo = 1;
				int qty = 10;
				String type="";
				String keyword="";
				if(request.getParameter("type") != null) {
					type = request.getParameter("type");
					keyword = request.getParameter("keyword");
					log.info(">>> type > "+ type + ">>> keyword > "+keyword);
				}
				if(request.getParameter("pageNo") != null) {
					pageNo = Integer.parseInt(request.getParameter("pageNo"));
					qty = Integer.parseInt(request.getParameter("qty"));
				}
				PagingVO pgvo = new PagingVO(pageNo,qty);
				pgvo.setType(type);
				pgvo.setKeyword(keyword);
				log.info(">>>pgvo > "+pgvo);
				//전체 페이지 개수
				int totCount = bsv.getTotal(pgvo);
				log.info("전체 페이지 개수 : "+totCount);
				//limit를 이용한 select List를 호출(startPage, qty)
				//한 페이지에 나와야 하는 리스트
				List<BoardVO> list = bsv.getPageList(pgvo);
				log.info(">>> list : "+list.size());
				PagingHandler ph = new PagingHandler(pgvo, totCount);
				request.setAttribute("pgh", ph);
				request.setAttribute("list", list);
				log.info("pageList 성공~!");
				destPage="/board/list.jsp";
			} catch (Exception e) {
				// TODO: handle exception
				e.printStackTrace();
			}
			break;
			
		case "detail":
			try {
				int bno = Integer.parseInt(request.getParameter("bno"));
				log.info(">>>"+bno);
				BoardVO bvo = bsv.detail(bno);
				log.info(">>> detail >" + bvo);
				request.setAttribute("bvo", bvo);
				destPage="/board/detail.jsp";
			} catch (Exception e) {
				e.printStackTrace();
			}
			break;
			
		case "modify":
			try {
				int bno = Integer.parseInt(request.getParameter("bno"));
				log.info(">>>"+bno);
				BoardVO bvo = bsv.detail(bno);
				log.info(">>> detail >"+bvo);
				request.setAttribute("bvo", bvo);
				
				destPage = "/board/modify.jsp";
			} catch (Exception e) {
				e.printStackTrace();
			}
			break;
			
		case "edit":
			try {
//				int bno, String title, String content
				BoardVO bvo = new BoardVO(Integer.parseInt(request.getParameter("bno")),
						request.getParameter("title"),
						request.getParameter("content"));
				log.info(">>>"+bvo);
				isOk = bsv.modify(bvo);
				log.info(">>> modify >" + (isOk > 0 ? "성공":"실패"));
				destPage="list";
				
			} catch (Exception e) {
				// TODO: handle exception
				e.printStackTrace();
			}
			break;
			
		case "remove":
			try {
				int bno = Integer.parseInt(request.getParameter("bno"));
				log.info(">>>"+bno);
				isOk = bsv.remove(bno);
				log.info(">>> modify >"+(isOk > 0 ? "성공":"실패"));
				destPage="list";
			} catch (Exception e) {
				e.printStackTrace();
			}
			break;
		
		}
		rdp = request.getRequestDispatcher(destPage);
		rdp.forward(request, response);
		
	}


	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		service(request, response);
	}


	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		service(request, response);
	}

}
